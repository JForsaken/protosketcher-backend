{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Protosketcher API"
  },
  "host": "",
  "basePath": "/api/v1",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/authenticate": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Get authentification token",
        "description": "Get authentification token",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User credentials",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Credentials"
            }
          }
        ]
      }
    },
    "/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create user",
        "description": "Create a new user",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ]
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List users",
        "description": "Get all users matching parameters",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The number of rows that will be returned",
            "required": false,
            "type": "integer"
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "The columns that will be returned",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get single user by id",
        "description": "Get the user matching the sent user id",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user to get",
            "required": true,
            "type": "string"
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "The columns that will be returned",
            "required": false,
            "type": "string"
          }
        ]
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user by id",
        "description": "Update the user matching the sent user id",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user to patch",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The fields and values which you want to update",
            "required": false,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete user by id",
        "description": "Delete the user matching the sent user id",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user to delete",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List current user",
        "description": "Get the user matching the sent token",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "attributes",
            "in": "query",
            "description": "The columns that will be returned",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/prototypes": {
      "post": {
        "tags": [
          "Prototypes"
        ],
        "summary": "Create prototype",
        "description": "Create a new prototype",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created prototype object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Prototype"
            }
          }
        ]
      },
      "get": {
        "tags": [
          "Prototypes"
        ],
        "summary": "List prototypes",
        "description": "Get all prototypes matching parameters",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The number of rows that will be returned",
            "required": false,
            "type": "integer"
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "The columns that will be returned",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/prototypes/{prototypeId}": {
      "get": {
        "tags": [
          "Prototypes"
        ],
        "summary": "Get single prototype by id",
        "description": "Get the prototype matching the sent prototype id",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "prototypeId",
            "in": "path",
            "description": "Id of the prototype to get",
            "required": true,
            "type": "string"
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "The columns that will be returned",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of rows that will be returned",
            "required": false,
            "type": "integer"
          },
          {
            "name": "populate",
            "in": "query",
            "description": "Populates the data of the rows representing an id for another table",
            "required": false,
            "type": "string"
          }
        ]
      },
      "patch": {
        "tags": [
          "Prototypes"
        ],
        "summary": "Update prototype by id",
        "description": "Update the prototype matching the sent prototype id",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "prototypeId",
            "in": "path",
            "description": "Id of the prototype to patch",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The fields and values which you want to update",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Prototype"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Prototypes"
        ],
        "summary": "Delete prototype by id",
        "description": "Delete the prototype matching the sent prototype id",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "prototypeId",
            "in": "path",
            "description": "Id of the prototype to delete",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/prototypes/{prototypeId}/pages": {
      "post": {
        "tags": [
          "Pages"
        ],
        "summary": "Create page",
        "description": "Create a new page for a specific prototype",
        "parameters": [
          {
            "name": "prototypeId",
            "in": "path",
            "description": "Prototype id of the page",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created page object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Page"
            }
          }
        ]
      },
      "get": {
        "tags": [
          "Pages"
        ],
        "summary": "List pages",
        "description": "Get all pages for a specific prototype matching parameters",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "prototypeId",
            "in": "path",
            "description": "Prototype id of the page",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of rows that will be returned",
            "required": false,
            "type": "integer"
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "The columns that will be returned",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/prototypes/{prototypeId}/pages/{pageId}": {
      "get": {
        "tags": [
          "Pages"
        ],
        "summary": "Get single page by id",
        "description": "Get the page for a specific prototype matching the sent page id",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "prototypeId",
            "in": "path",
            "description": "Id of the prototype",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageId",
            "in": "path",
            "description": "Id of the page to get",
            "required": true,
            "type": "string"
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "The columns that will be returned",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of rows that will be returned",
            "required": false,
            "type": "integer"
          },
          {
            "name": "populate",
            "in": "query",
            "description": "Populates the data of the rows representing an id for another table",
            "required": false,
            "type": "string"
          }
        ]
      },
      "patch": {
        "tags": [
          "Pages"
        ],
        "summary": "Update page by id",
        "description": "Update the page for a specific prototype matching the sent page id",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "prototypeId",
            "in": "path",
            "description": "Id of the prototype",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageId",
            "in": "path",
            "description": "Id of the page to patch",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The fields and values which you want to update",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Page"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Pages"
        ],
        "summary": "Delete page by id",
        "description": "Delete the page for a specific prototype matching the sent page id",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "prototypeId",
            "in": "path",
            "description": "Id of the prototype",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageId",
            "in": "path",
            "description": "Id of the page to delete",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/pagetypes": {
      "get": {
        "tags": [
          "Page Types"
        ],
        "summary": "List page types",
        "description": "Get all different page types matching parameters",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The number of rows that will be returned",
            "required": false,
            "type": "integer"
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "The columns that will be returned",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/prototypes/{prototypeId}/pages/{pageId}/shapes": {
      "post": {
        "tags": [
          "Shapes"
        ],
        "summary": "Create shape",
        "description": "Create a new shape for a specific page",
        "parameters": [
          {
            "name": "prototypeId",
            "in": "path",
            "description": "Prototype id of the page",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageId",
            "in": "path",
            "description": "Page id of the shape",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created shape object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Shape"
            }
          }
        ]
      },
      "get": {
        "tags": [
          "Shapes"
        ],
        "summary": "List shapes",
        "description": "Get all shapes for a specific page matching parameters",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "prototypeId",
            "in": "path",
            "description": "Prototype id of the page",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageId",
            "in": "path",
            "description": "Page id of the shape",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of rows that will be returned",
            "required": false,
            "type": "integer"
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "The columns that will be returned",
            "required": false,
            "type": "string"
          },
          {
            "name": "populate",
            "in": "query",
            "description": "Populates the data of the rows representing an id for another table",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/prototypes/{prototypeId}/pages/{pageId}/shapes/{shapeId}": {
      "get": {
        "tags": [
          "Shapes"
        ],
        "summary": "Get single shape by id",
        "description": "Get the shape for a specific page matching the sent shape id",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "prototypeId",
            "in": "path",
            "description": "Id of the prototype",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageId",
            "in": "path",
            "description": "Id of the page",
            "required": true,
            "type": "string"
          },
          {
            "name": "shapeId",
            "in": "path",
            "description": "Id of the shape to get",
            "required": true,
            "type": "string"
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "The columns that will be returned",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of rows that will be returned",
            "required": false,
            "type": "integer"
          },
          {
            "name": "populate",
            "in": "query",
            "description": "Populates the data of the rows representing an id for another table",
            "required": false,
            "type": "string"
          }
        ]
      },
      "patch": {
        "tags": [
          "Shapes"
        ],
        "summary": "Update shape by id",
        "description": "Update the shape for a specific page matching the sent shape id",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "prototypeId",
            "in": "path",
            "description": "Id of the prototype",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageId",
            "in": "path",
            "description": "Id of the page",
            "required": true,
            "type": "string"
          },
          {
            "name": "shapeId",
            "in": "path",
            "description": "Id of the shape to patch",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The fields and values which you want to update",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Shape"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Shapes"
        ],
        "summary": "Delete shape by id",
        "description": "Delete the shape for a specific page matching the sent shape id",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "prototypeId",
            "in": "path",
            "description": "Id of the prototype",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageId",
            "in": "path",
            "description": "Id of the page",
            "required": true,
            "type": "string"
          },
          {
            "name": "shapeId",
            "in": "path",
            "description": "Id of the shape to delete",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/shapetypes": {
      "get": {
        "tags": [
          "Shape Types"
        ],
        "summary": "List shape types",
        "description": "Get all different shape types matching parameters",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The number of rows that will be returned",
            "required": false,
            "type": "integer"
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "The columns that will be returned",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/prototypes/{prototypeId}/pages/{pageId}/texts": {
      "post": {
        "tags": [
          "Texts"
        ],
        "summary": "Create text",
        "description": "Create a new text for a specific page",
        "parameters": [
          {
            "name": "prototypeId",
            "in": "path",
            "description": "Prototype id of the page",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageId",
            "in": "path",
            "description": "Page id of the text",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created text object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Text"
            }
          }
        ]
      },
      "get": {
        "tags": [
          "Texts"
        ],
        "summary": "List texts",
        "description": "Get all texts for a specific page matching parameters",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "prototypeId",
            "in": "path",
            "description": "Prototype id of the page",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageId",
            "in": "path",
            "description": "Page id of the text",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of rows that will be returned",
            "required": false,
            "type": "integer"
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "The columns that will be returned",
            "required": false,
            "type": "string"
          },
          {
            "name": "populate",
            "in": "query",
            "description": "Populates the data of the rows representing an id for another table",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/prototypes/{prototypeId}/pages/{pageId}/texts/{textId}": {
      "get": {
        "tags": [
          "Texts"
        ],
        "summary": "Get single text by id",
        "description": "Get the text for a specific page matching the sent text id",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "prototypeId",
            "in": "path",
            "description": "Id of the prototype",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageId",
            "in": "path",
            "description": "Id of the page",
            "required": true,
            "type": "string"
          },
          {
            "name": "textId",
            "in": "path",
            "description": "Id of the text to get",
            "required": true,
            "type": "string"
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "The columns that will be returned",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of rows that will be returned",
            "required": false,
            "type": "integer"
          },
          {
            "name": "populate",
            "in": "query",
            "description": "Populates the data of the rows representing an id for another table",
            "required": false,
            "type": "string"
          }
        ]
      },
      "patch": {
        "tags": [
          "Texts"
        ],
        "summary": "Update text by id",
        "description": "Update the text for a specific page matching the sent text id",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "prototypeId",
            "in": "path",
            "description": "Id of the prototype",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageId",
            "in": "path",
            "description": "Id of the page",
            "required": true,
            "type": "string"
          },
          {
            "name": "textId",
            "in": "path",
            "description": "Id of the text to patch",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The fields and values which you want to update",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Text"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Texts"
        ],
        "summary": "Delete text by id",
        "description": "Delete the text for a specific page matching the sent text id",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "prototypeId",
            "in": "path",
            "description": "Id of the prototype",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageId",
            "in": "path",
            "description": "Id of the page",
            "required": true,
            "type": "string"
          },
          {
            "name": "textId",
            "in": "path",
            "description": "Id of the text to delete",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/prototypes/{prototypeId}/shapes/{shapeId}/controls": {
      "post": {
        "tags": [
          "Controls"
        ],
        "summary": "Create control",
        "description": "Create a new control for a specific shape",
        "parameters": [
          {
            "name": "prototypeId",
            "in": "path",
            "description": "Prototype id of the page",
            "required": true,
            "type": "string"
          },
          {
            "name": "shapeId",
            "in": "path",
            "description": "Shape id of the control",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created control object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Control"
            }
          }
        ]
      },
      "get": {
        "tags": [
          "Controls"
        ],
        "summary": "List controls",
        "description": "Get all controls for a specific shape matching parameters",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "prototypeId",
            "in": "path",
            "description": "Prototype id of the page",
            "required": true,
            "type": "string"
          },
          {
            "name": "shapeId",
            "in": "path",
            "description": "Shape id of the control",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of rows that will be returned",
            "required": false,
            "type": "integer"
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "The columns that will be returned",
            "required": false,
            "type": "string"
          },
          {
            "name": "populate",
            "in": "query",
            "description": "Populates the data of the rows representing an id for another table",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/prototypes/{prototypeId}/shapes/{shapeId}/controls/{controlId}": {
      "get": {
        "tags": [
          "Controls"
        ],
        "summary": "Get single control by id",
        "description": "Get the control for a specific shape matching the sent control id",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "prototypeId",
            "in": "path",
            "description": "Id of the prototype",
            "required": true,
            "type": "string"
          },
          {
            "name": "shapeId",
            "in": "path",
            "description": "Id of the shape",
            "required": true,
            "type": "string"
          },
          {
            "name": "controlId",
            "in": "path",
            "description": "Id of the control to get",
            "required": true,
            "type": "string"
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "The columns that will be returned",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of rows that will be returned",
            "required": false,
            "type": "integer"
          },
          {
            "name": "populate",
            "in": "query",
            "description": "Populates the data of the rows representing an id for another table",
            "required": false,
            "type": "string"
          }
        ]
      },
      "patch": {
        "tags": [
          "Controls"
        ],
        "summary": "Update control by id",
        "description": "Update the control for a specific shape matching the sent control id",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "prototypeId",
            "in": "path",
            "description": "Id of the prototype",
            "required": true,
            "type": "string"
          },
          {
            "name": "shapeId",
            "in": "path",
            "description": "Id of the shape",
            "required": true,
            "type": "string"
          },
          {
            "name": "controlId",
            "in": "path",
            "description": "Id of the control to patch",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The fields and values which you want to update",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Control"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Controls"
        ],
        "summary": "Delete control by id",
        "description": "Delete the control for a specific shape matching the sent control id",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "prototypeId",
            "in": "path",
            "description": "Id of the prototype",
            "required": true,
            "type": "string"
          },
          {
            "name": "shapeId",
            "in": "path",
            "description": "Id of the shape",
            "required": true,
            "type": "string"
          },
          {
            "name": "controlId",
            "in": "path",
            "description": "Id of the control to get",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/eventtypes": {
      "get": {
        "tags": [
          "Event Types"
        ],
        "summary": "List event types",
        "description": "Get all different event types matching parameters",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The number of rows that will be returned",
            "required": false,
            "type": "integer"
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "The columns that will be returned",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/actiontypes": {
      "get": {
        "tags": [
          "Action Types"
        ],
        "summary": "List action types",
        "description": "Get all different action types matching parameters",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The number of rows that will be returned",
            "required": false,
            "type": "integer"
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "The columns that will be returned",
            "required": false,
            "type": "string"
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "token": {
      "type": "apiKey",
      "name": "x-access-token",
      "in": "header"
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "description": "email"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "Prototype": {
      "type": "object",
      "required": [
        "name",
        "isMobile"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the prototype"
        },
        "isMobile": {
          "type": "boolean",
          "description": "If the prototype is built for mobile of desktop"
        }
      }
    },
    "Page": {
      "type": "object",
      "required": [
        "name",
        "pageTypeId"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the page"
        },
        "pageTypeId": {
          "type": "string",
          "description": "Type id of the page"
        }
      }
    },
    "PageType": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the page"
        }
      }
    },
    "Shape": {
      "type": "object",
      "required": [
        "shapeTypeId",
        "path",
        "color",
        "x",
        "y",
        "uuid"
      ],
      "properties": {
        "shapeTypeId": {
          "type": "string",
          "description": "Type id of the shape"
        },
        "parentId": {
          "type": "string",
          "description": "Parent id of the squiggly shape"
        },
        "path": {
          "type": "string",
          "description": "SVG path of the shape"
        },
        "color": {
          "type": "string",
          "description": "Hexadecimal code for the color of the shape"
        },
        "x": {
          "type": "integer",
          "description": "X position for the shape"
        },
        "y": {
          "type": "integer",
          "description": "Y position for the shape"
        },
        "uuid": {
          "type": "string",
          "description": "The uuid of the newly created shape"
        }
      }
    },
    "ShapeType": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the shape"
        }
      }
    },
    "Text": {
      "type": "object",
      "required": [
        "fontSize",
        "content",
        "x",
        "y",
        "uuid"
      ],
      "properties": {
        "fontSize": {
          "type": "number",
          "description": "Font size of the text"
        },
        "content": {
          "type": "string",
          "description": "Content of the text"
        },
        "x": {
          "type": "integer",
          "description": "X position for the shape"
        },
        "y": {
          "type": "integer",
          "description": "Y position for the shape"
        },
        "parentId": {
          "type": "string",
          "description": "Shape id of the text if it has a parent shape"
        },
        "uuid": {
          "type": "string",
          "description": "The uuid of the newly created text"
        }
      }
    },
    "Control": {
      "type": "object",
      "required": [
        "eventTypeId",
        "actionTypeId",
        "uuid"
      ],
      "properties": {
        "eventTypeId": {
          "type": "string",
          "description": "Type id of the event"
        },
        "actionTypeId": {
          "type": "string",
          "description": "Type id of the action"
        },
        "affectedShapeIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The affected shapes by the control"
        },
        "affectedPageId": {
          "type": "string",
          "description": "The affected page by the control"
        },
        "uuid": {
          "type": "string",
          "description": "The uuid of the newly created control"
        }
      }
    },
    "EventType": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event"
        }
      }
    },
    "ActionType": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the action"
        }
      }
    },
    "Credentials": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "description": "email"
        },
        "password": {
          "type": "string"
        }
      }
    }
  }
}
